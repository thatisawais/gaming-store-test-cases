pipeline {
    agent any

    environment {
        APP_REPO = 'https://github.com/thatisawais/gaming-store.git'
        TEST_REPO = 'https://github.com/thatisawais/gaming-store-test-cases.git'
        APP_IMAGE = 'gaming-ecommerce-app'
        TEST_IMAGE = 'gaming-ecommerce-tests'
    }

    stages {
        stage('Checkout Application') {
            steps {
                dir('app') {
                    git branch: 'main', url: "${APP_REPO}"
                }
            }
        }

        stage('Checkout Tests') {
            steps {
                dir('tests') {
                    git branch: 'main', url: "${TEST_REPO}"
                }
            }
        }

        stage('Build Application Docker Image') {
            steps {
                dir('app') {
                    script {
                        sh 'docker build -t ${APP_IMAGE} .'
                    }
                }
            }
        }

        stage('Build Test Docker Image') {
            steps {
                dir('tests') {
                    script {
                        sh 'docker build -t ${TEST_IMAGE} .'
                    }
                }
            }
        }

        stage('Start Application Container') {
            steps {
                script {
                    sh '''
                        # Stop and remove existing container
                        if docker ps -q --filter "name=gaming-app"; then
                            docker stop gaming-app || true
                            docker rm gaming-app || true
                        fi

                        # Free port 3000 if used
                        USED_CONTAINER=$(docker ps --filter "publish=3000" -q)
                        if [ ! -z "$USED_CONTAINER" ]; then
                            docker stop $USED_CONTAINER || true
                            docker rm $USED_CONTAINER || true
                        fi

                        # Start application container
                        docker run -d --name gaming-app -p 3000:3000 ${APP_IMAGE}

                        # Wait for app to start
                        echo "‚è≥ Waiting for app to start..."
                        sleep 30
                    '''
                }
            }
        }

        stage('Run Tests Against App') {
            steps {
                script {
                    sh '''
                        echo "üöÄ Running tests..."
                        docker run --rm --network host ${TEST_IMAGE}
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                def authorEmail = sh(script: "git --no-pager show -s --format='%ae' HEAD", returnStdout: true).trim()
                emailext (
                    subject: "‚úÖ Build Success: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: "The build was successful.\n\nCheck details: ${env.BUILD_URL}",
                    to: authorEmail,
                    mimeType: 'text/plain'
                )
            }
        }
        failure {
            script {
                def authorEmail = sh(script: "git --no-pager show -s --format='%ae' HEAD", returnStdout: true).trim()
                emailext (
                    subject: "‚ùå Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: "The build has failed.\n\nCheck logs and details: ${env.BUILD_URL}",
                    to: authorEmail,
                    attachLog: true,
                    mimeType: 'text/plain'
                )
            }
        }
    }
}